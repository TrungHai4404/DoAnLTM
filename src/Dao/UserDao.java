package dao;

import Server.MyConnection;
import Utils.PasswordUtils;
import java.sql.*;
import java.util.HashSet;
import model.User;

public class UserDao{
// ‚úÖ Ki·ªÉm tra tr√πng t√™n ƒëƒÉng nh·∫≠p
    public boolean checkUsernameExists(String username) {
        String sql = "SELECT COUNT(*) FROM Users WHERE Username = ?";
        try (Connection conn = MyConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            return rs.getInt(1) > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // ‚úÖ ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
    public boolean registerUser(User user) {
        String sql = "INSERT INTO Users (Username, PasswordHash, FullName, Email) VALUES (?, ?, ?, ?)";
        try (Connection conn = MyConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getPasswordHash());
            stmt.setString(3, user.getFullName());
            stmt.setString(4, user.getEmail());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // ‚úÖ ƒêƒÉng nh·∫≠p (ki·ªÉm tra username & password)
    public User login(String username, String passwordHash) {
        String sql = "SELECT * FROM Users WHERE Username = ? AND PasswordHash = ?";
        try (Connection conn = MyConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            stmt.setString(2, passwordHash);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getString("UserID"));
                user.setUsername(rs.getString("Username"));
                user.setPasswordHash(rs.getString("PasswordHash"));
                user.setFullName(rs.getString("FullName"));
                user.setEmail(rs.getString("Email"));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
    // L·∫•y UserID theo Username
    public String getUserId(String username) {
        try (Connection conn = MyConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement("SELECT UserID FROM Users WHERE Username = ?")) {
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) return rs.getString("UserID");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    // ƒê·ªïi m·∫≠t kh·∫©u
    public boolean changePassword(String username, String oldPass, String newPass) {
        String selectSQL = "SELECT PasswordHash FROM Users WHERE Username = ?";
        String updateSQL = "UPDATE Users SET PasswordHash = ? WHERE Username = ?";

        try (Connection conn = MyConnection.getConnection();
             PreparedStatement psSelect = conn.prepareStatement(selectSQL);
             PreparedStatement psUpdate = conn.prepareStatement(updateSQL)) {

            // üîπ BƒÉm m·∫≠t kh·∫©u c≈© & m·ªõi
            String oldHash = PasswordUtils.hashPassword(oldPass);
            String newHash = PasswordUtils.hashPassword(newPass);

            // üîπ L·∫•y m·∫≠t kh·∫©u hi·ªán t·∫°i trong DB
            psSelect.setString(1, username);
            ResultSet rs = psSelect.executeQuery();

            if (rs.next()) {
                String currentHash = rs.getString("PasswordHash");

                // So s√°nh m·∫≠t kh·∫©u c≈©
                if (!currentHash.equals(oldHash)) {
                    System.out.println("‚ùå M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c!");
                    return false;
                }

                // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
                psUpdate.setString(1, newHash);
                psUpdate.setString(2, username);
                int rows = psUpdate.executeUpdate();

                if (rows > 0) {
                    System.out.println("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng cho user: " + username);
                    return true;
                } else {
                    System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ b·∫£n ghi n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
                }
            } else {
                System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n: " + username);
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: " + e.getMessage());
            e.printStackTrace();
        }

        return false;
    }
}
