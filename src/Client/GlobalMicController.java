package Client;

// L·ªõp Singleton ƒë·ªÉ qu·∫£n l√Ω quy·ªÅn s·ª≠ d·ª•ng micro tr√™n to√†n ·ª©ng d·ª•ng
public class GlobalMicController {
    // 1. Singleton Pattern
    private static final GlobalMicController instance = new GlobalMicController();

    // 2. L∆∞u l·∫°i AudioClientUDP n√†o ƒëang gi·ªØ quy·ªÅn s·ª≠ d·ª•ng micro
    private AudioClientUDP currentMicHolder = null;

    private GlobalMicController() {}

    public static GlobalMicController getInstance() {
        return instance;
    }

    /**
     * M·ªôt AudioClientUDP y√™u c·∫ßu quy·ªÅn s·ª≠ d·ª•ng micro.
     * @param requester Client y√™u c·∫ßu.
     * @return true n·∫øu c·∫•p quy·ªÅn th√†nh c√¥ng, false n·∫øu micro ƒë√£ b·ªã ng∆∞·ªùi kh√°c chi·∫øm gi·ªØ.
     */
    public synchronized boolean requestMicAccess(AudioClientUDP requester) {
        // N·∫øu kh√¥ng c√≥ ai gi·ªØ mic, ho·∫∑c ng∆∞·ªùi y√™u c·∫ßu ch√≠nh l√† ng∆∞·ªùi ƒëang gi·ªØ mic
        if (currentMicHolder == null || currentMicHolder == requester) {
            currentMicHolder = requester;
            System.out.println("üé§ Mic access GRANTED to: " + requester.getClientID());
            return true;
        }
        
        // N·∫øu micro ƒë√£ b·ªã ng∆∞·ªùi kh√°c chi·∫øm gi·ªØ
        System.out.println("üé§ Mic access DENIED for: " + requester.getClientID() + ". Held by: " + currentMicHolder.getClientID());
        return false;
    }

    /**
     * M·ªôt AudioClientUDP gi·∫£i ph√≥ng micro.
     * @param releaser Client gi·∫£i ph√≥ng.
     */
    public synchronized void releaseMicAccess(AudioClientUDP releaser) {
        // Ch·ªâ ng∆∞·ªùi ƒëang gi·ªØ mic m·ªõi c√≥ quy·ªÅn gi·∫£i ph√≥ng n√≥
        if (currentMicHolder == releaser) {
            currentMicHolder = null;
            System.out.println("üé§ Mic access RELEASED by: " + releaser.getClientID());
        }
    }

    /**
     * Ki·ªÉm tra xem m·ªôt client c·ª• th·ªÉ c√≥ ƒëang gi·ªØ mic kh√¥ng.
     */
    public synchronized boolean isHoldingMic(AudioClientUDP client) {
        return currentMicHolder == client;
    }
}