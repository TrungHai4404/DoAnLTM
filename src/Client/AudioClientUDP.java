package Client;

import java.io.IOException;
import javax.sound.sampled.*;
import java.net.*;
import java.util.Arrays;
import java.util.concurrent.ConcurrentLinkedQueue;
import javax.swing.SwingUtilities;

public class AudioClientUDP {
    private final int port = 5001;
    private final int BUFFER_SIZE = 512; // K√≠ch th∆∞·ªõc buffer nh·ªè h∆°n ƒë·ªÉ gi·∫£m ƒë·ªô tr·ªÖ
    
    private static final byte[] HEARTBEAT_DATA = "HBEAT".getBytes();
    private static final int HEARTBEAT_INTERVAL = 3000; // 3 gi√¢y g·ª≠i ping
    private static final int HEARTBEAT_TIMEOUT = 9000;
    private volatile boolean disconnectedHandled = false;
    private String roomCode;
    private String clientID;

    public interface ConnectionListener {
        void onServerDisconnected(String type);
    }
    
    private ConnectionListener listener;
    public void setConnectionListener(ConnectionListener listener) {
        this.listener = listener;
    }

    private DatagramSocket socket;
    private InetAddress serverAddr;

    // üí° S·ª¨A L·ªñI: Chuy·ªÉn mic v√† speakers th√†nh bi·∫øn c·ªßa l·ªõp ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p v√† ƒë√≥ng ch√∫ng
    private TargetDataLine mic;
    private SourceDataLine speakers;

    private volatile boolean running = true;
    private volatile boolean micEnabled = true;

    // üí° T·ªêI ∆ØU: Jitter buffer
    private final ConcurrentLinkedQueue<byte[]> jitterBuffer = new ConcurrentLinkedQueue<>();
    private final int JITTER_BUFFER_MIN_SIZE = 3; // B·∫Øt ƒë·∫ßu ph√°t khi c√≥ √≠t nh·∫•t 3 g√≥i

    private volatile long lastResponseTime = System.currentTimeMillis();

    public AudioClientUDP(String serverIP,String roomCode, String clientID) throws Exception {
        this.roomCode = roomCode;
        this.clientID = clientID;
        socket = new DatagramSocket();            // c·ªïng ng·∫´u nhi√™n
        socket.setSoTimeout(3000);                // ƒë·ªÉ v√≤ng nh·∫≠n tho√°t ra ki·ªÉm tra timeout
        socket.setReceiveBufferSize(1 << 20);
        socket.setSendBufferSize(1 << 20);
        serverAddr = InetAddress.getByName(serverIP);
    }

    public boolean toggleMic() {
        micEnabled = !micEnabled;
        System.out.println(micEnabled ? " Micro on" : "üîá Micro off");
        return micEnabled;
    }
    public void stop() {
        running = false; // T√≠n hi·ªáu cho c√°c lu·ªìng d·ª´ng l·∫°i

        // üí° S·ª¨A L·ªñI: ƒê√≥ng v√† gi·∫£i ph√≥ng t√†i nguy√™n mic v√† loa
        if (mic != null && mic.isOpen()) {
            mic.stop();
            mic.close();
            System.out.println("Mic release.");
        }
        if (speakers != null && speakers.isOpen()) {
            speakers.stop();
            speakers.close();
            System.out.println("Speaker release");
        }

        // ƒê√≥ng socket sau c√πng ƒë·ªÉ ng·∫Øt c√°c lu·ªìng ƒëang ch·ªù
        if (socket != null && !socket.isClosed()) {
            socket.close();
        }
    }
    
    public void start() {
        try {
            initAudioLines();
            startSending();
            startReceiving();
            startPlaying(); // üí° S·ª¨A L·ªñI: B·∫Øt ƒë·∫ßu lu·ªìng ph√°t √¢m thanh ri√™ng bi·ªát
            startHeartbeatSender();
            startHeartbeatMonitor();
        } catch (LineUnavailableException e) {
            System.err.println("Khong the truy cap Micro va Loa");
            stop(); // D·ªçn d·∫πp n·∫øu kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c
        }
    }
    
    private void initAudioLines() throws LineUnavailableException {
        AudioFormat format = getAudioFormat();
        // Kh·ªüi t·∫°o Mic
        DataLine.Info micInfo = new DataLine.Info(TargetDataLine.class, format);
        mic = (TargetDataLine) AudioSystem.getLine(micInfo);
        mic.open(format, BUFFER_SIZE * 2);
        mic.start();

        // Kh·ªüi t·∫°o Loa
        DataLine.Info speakerInfo = new DataLine.Info(SourceDataLine.class, format);
        speakers = (SourceDataLine) AudioSystem.getLine(speakerInfo);
        speakers.open(format, BUFFER_SIZE * 4); // Buffer loa l·ªõn h∆°n m·ªôt ch√∫t
        speakers.start();
    }

    private void startSending() {
        new Thread(() -> {
            byte[] buffer = new byte[BUFFER_SIZE];
            while (running) {
                try {
                    if (!micEnabled) {
                        Thread.sleep(40);
                        continue;
                    }else if (micEnabled) {
                        int bytesRead = mic.read(buffer, 0, buffer.length);
                        if (bytesRead > 0) {
                            sendAudio(Arrays.copyOf(buffer, bytesRead));
                        }
                    } else {
                        // üí° S·ª¨A L·ªñI: G·ª≠i heartbeat khi mic t·∫Øt
                        DatagramPacket heartbeatPkt = new DatagramPacket(HEARTBEAT_DATA, HEARTBEAT_DATA.length, serverAddr, port);
                        socket.send(heartbeatPkt);
                        Thread.sleep(2000); // G·ª≠i 2 gi√¢y m·ªôt l·∫ßn
                    }
                } catch (Exception e) {
                    if (running) System.err.println("L·ªói g·ª≠i audio: " + e.getMessage());
                }
            }
            System.out.println("Lu·ªìng g·ª≠i audio ƒë√£ d·ª´ng.");
        }, "Audio-Sender").start();
    }
    private void sendAudio(byte[] audioData) {
        try {
            byte[] roomBytes = new byte[36];
            byte[] idBytes = new byte[36];

            System.arraycopy(roomCode.getBytes(), 0, roomBytes, 0, Math.min(roomCode.length(), 36));
            System.arraycopy(clientID.getBytes(), 0, idBytes, 0, Math.min(clientID.length(), 36));

            byte[] combined = new byte[72 + audioData.length];
            System.arraycopy(roomBytes, 0, combined, 0, 36);
            System.arraycopy(idBytes, 0, combined, 36, 36);
            System.arraycopy(audioData, 0, combined, 72, audioData.length);

            DatagramPacket pkt = new DatagramPacket(combined, combined.length, serverAddr, port);
            socket.send(pkt);
        } catch (Exception e) {
            if (running) System.err.println("L·ªói g·ª≠i audio: " + e.getMessage());
        }
    }

    private void startReceiving() {
    new Thread(() -> {
        byte[] buffer = new byte[BUFFER_SIZE * 2];
        while (running) {
            try {
                DatagramPacket pkt = new DatagramPacket(buffer, buffer.length);
                socket.receive(pkt);
                lastResponseTime = System.currentTimeMillis();
                
                byte[] receivedData = Arrays.copyOf(pkt.getData(), pkt.getLength());
                if (Arrays.equals(receivedData, HEARTBEAT_DATA)) {
                    continue;
                }
                jitterBuffer.offer(receivedData);
            } catch (SocketTimeoutException e) {
                // timeout ‚Üí b·ªè qua
            } catch (SocketException e) {
                if (!running)
                    break;
                notifyDisconnect("AUDIO", e);
                break;
            } catch (IOException e) {
                if (running) notifyDisconnect("AUDIO", e);
                break;
            } catch (Exception e) {
                if (running) e.printStackTrace();
            }
        }
        System.out.println("Lu·ªìng nh·∫≠n audio ƒë√£ d·ª´ng.");
    }, "Audio-Receiver").start();
}

    // üí° S·ª¨A L·ªñI: Lu·ªìng ri√™ng ƒë·ªÉ ph√°t √¢m thanh t·ª´ Jitter Buffer
    private void startPlaying() {
        new Thread(() -> {
            while (running) {
                try {
                    // Ch·ªâ ph√°t khi buffer c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o m∆∞·ª£t m√†
                    if (jitterBuffer.size() >= JITTER_BUFFER_MIN_SIZE) {
                        byte[] data = jitterBuffer.poll();
                        if (data != null) {
                            speakers.write(data, 0, data.length);
                        }
                    } else {
                        // N·∫øu buffer r·ªóng, ƒë·ª£i m·ªôt ch√∫t
                        Thread.sleep(10); 
                    }
                } catch (Exception e) {
                    if (running) System.err.println("L·ªói ph√°t audio: " + e.getMessage());
                }
            }
             System.out.println("Lu·ªìng ph√°t audio ƒë√£ d·ª´ng.");
        }, "Audio-Player").start();
    }
    /** G·ª¨I HEARTBEAT ƒê·ªäNH K·ª≤ (ƒë·ªôc l·∫≠p audio) */
    private void startHeartbeatSender() {
        new Thread(() -> {
            while (running) {
                try {
                    DatagramPacket hb = new DatagramPacket(HEARTBEAT_DATA, HEARTBEAT_DATA.length, serverAddr, port);
                    socket.send(hb);
                    Thread.sleep(HEARTBEAT_INTERVAL);
                } catch (Exception e) {
                    if (running) System.err.println("‚ö†Ô∏è L·ªói g·ª≠i heartbeat: " + e.getMessage());
                }
            }
        }, "Audio-HB-Send").start();
    }
    /** GI√ÅM S√ÅT: qu√° 9s kh√¥ng nh·∫≠n ‚Üí m·∫•t k·∫øt n·ªëi */
    private void startHeartbeatMonitor() {
        new Thread(() -> {
            while (running) {
                try {
                    if (System.currentTimeMillis() - lastResponseTime > HEARTBEAT_TIMEOUT) {
                        notifyDisconnect("AUDIO", null);
                        break;
                    }
                    Thread.sleep(1000);
                } catch (InterruptedException ignore) {}
            }
        }, "Audio-HB-Mon").start();
    }
    private void notifyDisconnect(String type, Exception e) {
        if (disconnectedHandled) return; // tr√°nh g·ªçi nhi·ªÅu l·∫ßn
        disconnectedHandled = true;

        System.err.println("üîå M·∫•t k·∫øt n·ªëi t·ªõi " + type + " server"
                + (e != null ? ": " + e.getMessage() : ""));

        running = false; // d·ª´ng t·∫•t c·∫£ c√°c v√≤ng while
        //stop(); // ƒë√≥ng mic, speaker, socket,...

        if (listener != null) {
            SwingUtilities.invokeLater(() -> listener.onServerDisconnected(type));
        }
    }
    private AudioFormat getAudioFormat() {
        float sampleRate = 16000.0F; // üí° T·ªêI ∆ØU: D√πng 16kHz, t·ªët h∆°n cho voice chat v√† t∆∞∆°ng th√≠ch r·ªông r√£i
        int sampleSizeInBits = 16;
        int channels = 1;
        boolean signed = true;
        boolean bigEndian = false;
        return new AudioFormat(sampleRate, sampleSizeInBits, channels, signed, bigEndian);
    }
    
}